import requests
import telebot
from telebot import types
from time import strftime, localtime
from colorama import Fore, init

init(autoreset=True)

cities = {
    "–°–æ—á–∏": "Sochi, RU",
    "–ê–Ω–∞–ø–∞": "Anapa, RU",
    "–ù–æ–≤–æ—Ä–æ—Å—Å–∏–π—Å–∫": "Novorossiysk, RU",
    "–°–µ–≤–∞—Å—Ç–æ–ø–æ–ª—å—Å–∫–∞—è –±—É—Ö—Ç–∞": "Sevastopol, UA",
    "–ë–∞–ª–∞–∫–ª–∞–≤–∞": "Balaklava, UA",
    "–ö–∞—á–∞": "Kacha, UA",
    "–®–∏—Ä–æ–∫–∞—è –ë–∞–ª–∫–∞": "Shirokaya Balka, RU",
    "–Ø–ª—Ç–∞": "Yalta, UA",
    "–ú—ã—Å –¢–æ–ª—Å—Ç—è–∫": "–°–µ–≤–µ—Ä–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞, UA",
    "–ì–æ–ª—É–±–∞—è –±—É—Ö—Ç–∞": "–ö–∞–∑–∞—á—å—è –±—É—Ö—Ç–∞, UA",
    "–§–æ—Ä–æ—Å": "Foros, UA",
    "–ü–∞—Ä–∫ –ü–æ–±–µ–¥—ã": "Sevastopol, UA",
    "–§—Ä—É–Ω–∑–µ": "Frunze, UA",
    "–ü–µ—Å—á–∞–Ω–Ω–æ–µ": "Uglovoye, UA",
    "–ê–ª—É—à—Ç–∞": "Alushta, UA",
    "–ê—Ä–∞–±–∞—Ç—Å–∫–∞—è –°—Ç—Ä–µ–ª–∫–∞": "Urochyshche Rozhkova, UA",
    "–ö–∞–º—ã—à–æ–≤–∞—è –±—É—Ö—Ç–∞": "Shablykina, UA",
    "–ù–µ–º–µ—Ü–∫–∞—è –±–∞–ª–∫–∞": "Kacha, UA",
    "–§–∏–æ–ª–µ–Ω—Ç": "Balaklava, UA",
    "–õ–∞—Å–ø–∏": "Laspi, UA",
    "–£—á–∫—É–µ–≤–∫–∞": "–ö–∞–∑–∞—á—å—è –±—É—Ö—Ç–∞, UA",
    "–ò–Ω–∂–∏—Ä": "Balaklava, UA",
}

api_key = 'bf0a20c083fcba8ec90f9c04628badd3'
bot = telebot.TeleBot('5839014213:AAE568cbq_VI8XXgY3nBEIBEu2s7meH5vPk')


@bot.message_handler(commands=['start'])
def start(message):
    current_time = strftime("%a %b %d %H:%M:%S %Y", localtime())
    print(Fore.LIGHTBLUE_EX + "/start", "—Å–ø—Ä–æ—Å–∏–ª:", "ID", Fore.LIGHTGREEN_EX + str(message.from_user.id), "–ò–º—è:",
          Fore.LIGHTGREEN_EX +
          str(message.from_user.first_name), "–§–∞–º–∏–ª–∏—è:", Fore.LIGHTGREEN_EX +
          str(message.from_user.last_name), "–ù–∏–∫:", Fore.LIGHTGREEN_EX +
          str(message.from_user.username), '////', Fore.LIGHTRED_EX + str(current_time))

    bot.reply_to(message,  # replying to user's message instead of just sending a message
                 f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name} ! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø–æ–≥–æ–¥—ã.'  # text inside the reply
                 f' –î–ª—è –ø–æ–º–æ—â–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /help')


@bot.message_handler(commands=['help'])  # help command
def start_message(message):  # help func
    current_time = strftime("%a %b %d %H:%M:%S %Y", localtime())
    print(Fore.LIGHTBLUE_EX + "/help", "—Å–ø—Ä–æ—Å–∏–ª:", "ID", Fore.LIGHTGREEN_EX + str(message.from_user.id), "–ò–º—è:",
          Fore.LIGHTGREEN_EX +
          str(message.from_user.first_name), "–§–∞–º–∏–ª–∏—è:", Fore.LIGHTGREEN_EX +
          str(message.from_user.last_name), "–ù–∏–∫:", Fore.LIGHTGREEN_EX +
          str(message.from_user.username), '////', Fore.LIGHTRED_EX + str(current_time))
    bot.reply_to(message,
                 f'–Ø —É–º–µ—é –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–≥–æ–¥—É –æ–∫–æ–ª–æ –≤–∞—à–µ–≥–æ –¥–æ–º–∞! \n\n'
                 f' 1. –í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ /weather1 –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –í–∞—à –≥–æ—Ä–æ–¥ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.\n'
                 f' 2.  –í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ /weather2 –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –í–∞—à –≥–æ—Ä–æ–¥ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞.\n'
                 f' 3. –í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ /weather35 –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –í–∞—à –≥–æ—Ä–æ–¥ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ —Å —Ç—Ä–µ—Ç—å–µ–≥–æ –ø–æ –ø—è—Ç—ã–π –¥–Ω–∏.\n\n'
                 f'–î–ª—è —Å–≤—è–∑–∏ —Å –º–æ–∏–º —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º –ø–æ –ª—é–±—ã–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ https://t.me/Rac_c00n. \n\n'
                 f' –ß—Ç–æ —Ç–æ –µ—â–µ {message.from_user.first_name} ?')


def wind_direction(deg):
    if 23 <= deg < 68:
        return '–°–µ–≤–µ—Ä–æ-–≤–æ—Å—Ç–æ–∫'
    elif 68 <= deg < 113:
        return '–í–æ—Å—Ç–æ–∫'
    elif 113 <= deg < 158:
        return '–Æ–≥–æ-–≤–æ—Å—Ç–æ–∫'
    elif 158 <= deg < 203:
        return '–Æ–≥'
    elif 203 <= deg < 248:
        return '–Æ–≥–æ-–∑–∞–ø–∞–¥'
    elif 248 <= deg < 293:
        return '–ó–∞–ø–∞–¥'
    elif 293 <= deg < 338:
        return '–°–µ–≤–µ—Ä–æ-–∑–∞–ø–∞–¥'
    else:
        return '–°–µ–≤–µ—Ä–Ω—ã–π'


def get_weather(city, api_key):
    url = f"http://api.openweathermap.org/data/2.5/forecast?q={city}&appid={api_key}"
    response = requests.get(url)
    data = response.json()
    return data


def weather_replace(weather):
    weather = weather.replace("thunderstorm with light rain", "–ì—Ä–æ–∑–∞ —Å –Ω–µ–±–æ–ª—å—à–∏–º –¥–æ–∂–¥–µ–º‚õà")
    weather = weather.replace("thunderstorm with rain", "–ì—Ä–æ–∑–∞ —Å –¥–æ–∂–¥–µ–º‚õà")
    weather = weather.replace("thunderstorm with heavy rain", "–ì—Ä–æ–∑–∞ —Å —Å–∏–ª—å–Ω—ã–º –¥–æ–∂–¥–µ–º‚õà")
    weather = weather.replace("light thunderstorm", "–õ–µ–≥–∫–∞—è –≥—Ä–æ–∑–∞‚õà")
    weather = weather.replace("thunderstorm", "–ì—Ä–æ–∑–∞‚õà")
    weather = weather.replace("heavy thunderstorm", "–°–∏–ª—å–Ω–∞—è –≥—Ä–æ–∑–∞‚õà")
    weather = weather.replace("ragged thunderstorm", "–ú–µ—Å—Ç–∞–º–∏ –≥—Ä–æ–∑–∞‚õà")
    weather = weather.replace("thunderstorm with light drizzle", "–ì—Ä–æ–∑–∞ —Å –º–µ–ª–∫–∏–º –¥–æ–∂–¥–µ–º‚õà")
    weather = weather.replace("thunderstorm with drizzle", "–ì—Ä–æ–∑–∞ —Å –º–æ—Ä–æ—Å—å—é‚õà")

    # drizzle
    weather = weather.replace("light intensity drizzle", "–ú–µ–ª–∫–∞—è –º–æ—Ä–æ—Å—åüíß")
    weather = weather.replace("drizzle", "–ú–æ—Ä–æ—Å—åüíß")
    weather = weather.replace("heavy intensity drizzle", "–°–∏–ª—å–Ω–∞—è –º–æ—Ä–æ—Å—åüíßüíß")
    weather = weather.replace("light intensity drizzle rain", "–°–ª–∞–±–∞—è –º–æ—Ä–æ—Å—åüíß")
    weather = weather.replace("drizzle rain", "–ú–æ—Ä–æ—Å—è—â–∏–π –¥–æ–∂–¥—åüåß")
    weather = weather.replace("heavy intensity drizzle rain", "–õ–∏–≤–µ–Ω—åüåß")
    weather = weather.replace("shower rain and drizzle", "–õ–∏–≤–µ–Ω—åüåß")
    weather = weather.replace("heavy shower rain and drizzle", "–õ–∏–≤–µ–Ω—åüåß")
    weather = weather.replace("shower drizzle", "–û—á–µ–Ω—å —Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—åüåß")

    # rain
    weather = weather.replace("light rain", "–õ–µ–≥–∫–∏–π –¥–æ–∂–¥—åüåß")
    weather = weather.replace("moderate rain", "–£–º–µ—Ä–µ–Ω–Ω—ã–π –¥–æ–∂–¥—åüåß")
    weather = weather.replace("heavy intensity rain", "–°–∏–ª—å–Ω—ã–π –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã–π –¥–æ–∂–¥—åüåß")
    weather = weather.replace("very heavy rain", "–û—á–µ–Ω—å —Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—åüåß")
    weather = weather.replace("extreme rain", "–°–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—åüåß")
    weather = weather.replace("freezing rain", "–õ–µ–¥—è–Ω–æ–π –¥–æ–∂–¥—å")
    weather = weather.replace("light intensity shower rain", "–°–ª–∞–±—ã–π –ª–∏–≤–µ–Ω—åüåß")
    weather = weather.replace("shower rain", "–õ–∏–≤–Ω–µ–≤—ã–π –¥–æ–∂–¥—åüåß")
    weather = weather.replace("heavy intensity shower rain", "–°–∏–ª—å–Ω—ã–π –ª–∏–≤–Ω–µ–≤—ã–π –¥–æ–∂–¥—åüåß")
    weather = weather.replace("ragged shower rain", "–ü—Ä–µ—Ä—ã–≤–∏—Å—Ç—ã–π –ª–∏–≤–µ–Ω—åüåß")

    # snow
    weather = weather.replace("light snow", "–°–ª–∞–±—ã–π —Å–Ω–µ–≥‚ùÑ")
    weather = weather.replace("snow", "–°–Ω–µ–≥‚ùÑ")
    weather = weather.replace("Heavy snow", "–°–∏–ª—å–Ω—ã–π —Å–Ω–µ–≥‚ùÑ")
    weather = weather.replace("Sleet", "–ú–æ–∫—Ä—ã–π —Å–Ω–µ–≥‚ùÑ")
    weather = weather.replace("Light shower sleet", "–°–ª–∞–±—ã–π —Å–Ω–µ–≥–æ–ø–∞–¥, –º–æ–∫—Ä—ã–π —Å–Ω–µ–≥‚ùÑ")
    weather = weather.replace("Shower sleet", "–°–Ω–µ–≥–æ–ø–∞–¥, –º–æ–∫—Ä—ã–π —Å–Ω–µ–≥‚ùÑ")
    weather = weather.replace("Light rain and snow	", "–°–ª–∞–±—ã–π –¥–æ–∂–¥—å —Å–æ —Å–Ω–µ–≥–æ–º‚ùÑ")
    weather = weather.replace("Rain and snow", "–î–æ–∂–¥—å —Å–æ —Å–Ω–µ–≥–æ–º‚ùÑ")
    weather = weather.replace("Light shower snow", "–°–ª–∞–±—ã–π —Å–Ω–µ–≥–æ–ø–∞–¥‚ùÑ")
    weather = weather.replace("Shower snow", "–°–Ω–µ–≥–æ–ø–∞–¥‚ùÑ")
    weather = weather.replace("Heavy shower snow", "–°–∏–ª—å–Ω—ã–π —Å–Ω–µ–≥–æ–ø–∞–¥‚ùÑ")

    # atmosphere
    weather = weather.replace("mist", "–¢—É–º–∞–Ωüå´")
    weather = weather.replace("smoke", "–î—ã–ºüå´")
    weather = weather.replace("Haze", "–¢—É–º–∞–Ωüå´")
    weather = weather.replace("sand/ dust whirls", "–ø–µ—Å—á–∞–Ω—ã–µ/–ø—ã–ª–µ–≤—ã–µ –≤–∏—Ö—Ä–∏üí®")
    weather = weather.replace("fog", "–¢—É–º–∞–Ωüå´")
    weather = weather.replace("sand", "–í–µ—Ç–µ—Ä —Å –ø–µ—Å–∫–æ–ºüí®")
    weather = weather.replace("dust", "–ü—ã–ª—å–Ω—ã–π –≤–µ—Ç–µ—Äüí®")
    weather = weather.replace("volcanic ash", "–í—É–ª–∫–∞–Ω–∏—á–µ—Å–∫–∏–π –ø–µ–ø–µ–ªüå´")
    weather = weather.replace("squalls", "–®–∫–≤–∞–ª—å–Ω—ã–π –≤–µ—Ç–µ—Äüí®")
    weather = weather.replace("tornado", "–¢–æ—Ä–Ω–∞–¥–æüí®")

    # sky
    weather = weather.replace("clear sky", "–Ø—Å–Ω–æ–µ –Ω–µ–±–æ‚òÄ")
    weather = weather.replace("few clouds", "–ú–∞–ª–æ–æ–±–ª–∞—á–Ω–æ‚õÖ")
    weather = weather.replace("scattered clouds", "–†–∞—Å—Å–µ—è–Ω–Ω—ã–µ –æ–±–ª–∞–∫–∞üå§")
    weather = weather.replace("broken clouds", "–î–æ–∂–¥–µ–≤—ã–µ –æ–±–ª–∞–∫–∞‚òÅ")
    weather = weather.replace("overcast clouds", "–ì—Ä–æ–∑–æ–≤—ã–µ –æ–±–ª–∞–∫–∞‚òÅ")
    return weather


def parse_weather_data(data, l_border, r_border, city):
    forecast = ''
    for i in range(l_border, r_border):
        date = data["list"][i]["dt_txt"]
        weather = data['list'][i]['weather'][0]['description']
        weather = weather_replace(weather)
        temperature = data['list'][i]['main']['temp'] - 273.15
        wind_speed = data['list'][i]['wind']['speed']
        wind_deg = data['list'][i]['wind']['deg']
        pressure = data["list"][i]["main"]["pressure"]
        humidity = data["list"][i]["main"]["humidity"]
        wind_dir = wind_direction(wind_deg)

        forecast += (f"{date}\n\n"
                     f"–ü–æ–≥–æ–¥–∞: {weather}\n"
                     f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {round(temperature)} ¬∞C\n"
                     f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity} % \n"
                     f"–î–∞–≤–ª–µ–Ω–∏–µ: {pressure} –≥–ü–∞ \n"
                     f"–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {wind_speed} –º/—Å\n"
                     f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞: {wind_dir}\n\n")
    return forecast


def handle_message(message, city, api_key, l_border, r_border):
    data = get_weather(city, api_key)
    return parse_weather_data(data, l_border, r_border, city)


@bot.message_handler(commands=['weather1', 'weather2', 'weather35'])
def handle_weather_commands(message):
    l_border, r_border = {
        'weather1': (0, 10),
        'weather2': (10, 20),
        'weather35': (20, 40),
    }[message.text[1:]]

    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, selective=True)
    for city in cities.keys():
        markup.add(city)
    bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –ª–æ–∫–∞—Ü–∏—é:", reply_markup=markup)
    current_time = strftime("%a %b %d %H:%M:%S %Y", localtime())
    print(Fore.LIGHTBLUE_EX + message.text, "—Å–ø—Ä–æ—Å–∏–ª:", "ID", Fore.LIGHTGREEN_EX + str(message.from_user.id), "–ò–º—è:",
          Fore.LIGHTGREEN_EX +
          str(message.from_user.first_name), "–§–∞–º–∏–ª–∏—è:", Fore.LIGHTGREEN_EX +
          str(message.from_user.last_name),
          str(message.from_user.last_name), "–ù–∏–∫:", Fore.LIGHTGREEN_EX +
          str(message.from_user.username), '////', Fore.LIGHTRED_EX + str(current_time))

    bot.register_next_step_handler(message, process_city, l_border, r_border)


def process_city(message, l_border, r_border, requests_count):
    if message.text in cities:
        city = cities[message.text]
        forecast = handle_message(message, city, api_key, l_border, r_border)
        bot.send_message(message.chat.id, forecast)
    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, selective=True)
        for city in cities.keys():
            markup.add(city)
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –ª–æ–∫–∞—Ü–∏—é:", reply_markup=markup)
        bot.register_next_step_handler(message, process_city, l_border, r_border)


if __name__ == '__main__':
    bot.polling(none_stop=True)
