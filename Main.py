import requests
import json
import telebot
from telebot import types
from time import *
from colorama import init, Fore

# from colorama import Back
# from colorama import Style

init(autoreset=True)  # for colorama

global i

l_border = 1  # default left border of measurements number (new measurement each 3 hour)
r_border = 11  # default right border of measurements number (new measurement each 3 hour)

bot = telebot.TeleBot("5839014213:AAE568cbq_VI8XXgY3nBEIBEu2s7meH5vPk")  # bot 2
api_key = "bf0a20c083fcba8ec90f9c04628badd3"  # open weather map token (5 days/3 hours free subscription)

# writing cities that work in the bot
cities = {
    "–°–æ—á–∏": "Sochi, RU",
    "–ê–Ω–∞–ø–∞": "Anapa, RU",
    "–ù–æ–≤–æ—Ä–æ—Å—Å–∏–π—Å–∫": "Novorossiysk, RU",
    "–°–µ–≤–∞—Å—Ç–æ–ø–æ–ª—å—Å–∫–∞—è –±—É—Ö—Ç–∞": "Sevastopol, UA",
    "–ë–∞–ª–∞–∫–ª–∞–≤–∞": "Balaklava, UA",
    "–ö–∞—á–∞": "Kacha, UA",
    "–®–∏—Ä–æ–∫–∞—è –ë–∞–ª–∫–∞": "Shirokaya Balka, RU",
    "–Ø–ª—Ç–∞": "Yalta, UA",
    "–ú—ã—Å –¢–æ–ª—Å—Ç—è–∫": "–°–µ–≤–µ—Ä–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞, UA",
    "–ì–æ–ª—É–±–∞—è –±—É—Ö—Ç–∞": "–ö–∞–∑–∞—á—å—è –±—É—Ö—Ç–∞, UA",
    "–§–æ—Ä–æ—Å": "Foros, UA",
    "–ü–∞—Ä–∫ –ü–æ–±–µ–¥—ã": "Sevastopol, UA",
    "–§—Ä—É–Ω–∑–µ": "Frunze, UA",
    "–ü–µ—Å—á–∞–Ω–Ω–æ–µ": "Uglovoye, UA",
    "–ê–ª—É—à—Ç–∞": "Alushta, UA",
    "–ê—Ä–∞–±–∞—Ç—Å–∫–∞—è –°—Ç—Ä–µ–ª–∫–∞": "Urochyshche Rozhkova, UA",
    "–ö–∞–º—ã—à–æ–≤–∞—è –±—É—Ö—Ç–∞": "Shablykina, UA",
    "–ù–µ–º–µ—Ü–∫–∞—è –±–∞–ª–∫–∞": "Kacha, UA",
    "–§–∏–æ–ª–µ–Ω—Ç": "Balaklava, UA",
    "–õ–∞—Å–ø–∏": "Laspi, UA",
    "–£—á–∫—É–µ–≤–∫–∞": "–ö–∞–∑–∞—á—å—è –±—É—Ö—Ç–∞, UA",
    "–ò–Ω–∂–∏—Ä": "Balaklava, UA",

}


# start command and func
@bot.message_handler(commands=['start'])  # start command
def start(message):  # start func

    current_time = strftime("%a %b %d %H:%M:%S %Y", localtime())
    print(Fore.LIGHTBLUE_EX + "/start", "—Å–ø—Ä–æ—Å–∏–ª:", "ID", Fore.LIGHTGREEN_EX + str(message.from_user.id), "–ò–º—è:",
          Fore.LIGHTGREEN_EX +
          str(message.from_user.first_name), "–§–∞–º–∏–ª–∏—è:", Fore.LIGHTGREEN_EX +
          str(message.from_user.last_name), "–ù–∏–∫:", Fore.LIGHTGREEN_EX +
          str(message.from_user.username), '////', Fore.LIGHTRED_EX + str(current_time))

    bot.reply_to(message,  # replying to user's message instead of just sending a message
                 f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name} ! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø–æ–≥–æ–¥—ã.'  # text inside the reply
                 f' –î–ª—è –ø–æ–º–æ—â–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /help')


# help command and func
@bot.message_handler(commands=['help'])  # help command
def start_message(message):  # help func
    current_time = strftime("%a %b %d %H:%M:%S %Y", localtime())
    print(Fore.LIGHTBLUE_EX + "/help", "—Å–ø—Ä–æ—Å–∏–ª:", "ID", Fore.LIGHTGREEN_EX + str(message.from_user.id), "–ò–º—è:",
          Fore.LIGHTGREEN_EX +
          str(message.from_user.first_name), "–§–∞–º–∏–ª–∏—è:", Fore.LIGHTGREEN_EX +
          str(message.from_user.last_name), "–ù–∏–∫:", Fore.LIGHTGREEN_EX +
          str(message.from_user.username), '////', Fore.LIGHTRED_EX + str(current_time))
    bot.reply_to(message,  # replying to user's message instead of just sending a message
                 f'–Ø —É–º–µ—é –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–≥–æ–¥—É –æ–∫–æ–ª–æ –≤–∞—à–µ–≥–æ –¥–æ–º–∞! \n\n'  # text inside the reply
                 f' 1. –í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ /weather1 –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –í–∞—à –≥–æ—Ä–æ–¥ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.\n'
                 f' 2.  –í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ /weather2 –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –í–∞—à –≥–æ—Ä–æ–¥ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞.\n'
                 f' 3. –í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ /weather35 –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –í–∞—à –≥–æ—Ä–æ–¥ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ —Å —Ç—Ä–µ—Ç—å–µ–≥–æ –ø–æ –ø—è—Ç—ã–π –¥–Ω–∏.\n\n'
                 f'–î–ª—è —Å–≤—è–∑–∏ —Å –º–æ–∏–º —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º –ø–æ –ª—é–±—ã–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ https://t.me/Rac_c00n. \n\n'
                 f' –ß—Ç–æ —Ç–æ –µ—â–µ {message.from_user.first_name} ?')


# getting data from OpenWeatherMap
def get_weather(city, api_key):
    url = f"http://api.openweathermap.org/data/2.5/forecast?q={city}&appid={api_key}"  # url with params city and api_key
    response = requests.get(url)
    data = json.loads(response.text)
    return data


@bot.message_handler(commands=['weather1'])
def days1(message):
    global l_border, r_border
    l_border = 0
    r_border = 10
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, selective=True)
    for city in cities.keys():
        markup.add(city)
    bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –ª–æ–∫–∞—Ü–∏—é:", reply_markup=markup)
    current_time = strftime("%a %b %d %H:%M:%S %Y", localtime())
    print(Fore.LIGHTBLUE_EX + "/weather1", "—Å–ø—Ä–æ—Å–∏–ª:", "ID", Fore.LIGHTGREEN_EX + str(message.from_user.id), "–ò–º—è:",
          Fore.LIGHTGREEN_EX +
          str(message.from_user.first_name), "–§–∞–º–∏–ª–∏—è:", Fore.LIGHTGREEN_EX +
          str(message.from_user.last_name), "–ù–∏–∫:", Fore.LIGHTGREEN_EX +
          str(message.from_user.username), '////', Fore.LIGHTRED_EX + str(current_time))

    return l_border, r_border


@bot.message_handler(commands=['weather2'])
def days2(message):
    global l_border, r_border
    l_border = 10
    r_border = 20
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, selective=True)
    for city in cities.keys():
        markup.add(city)
    bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –ª–æ–∫–∞—Ü–∏—é:", reply_markup=markup)
    current_time = strftime("%a %b %d %H:%M:%S %Y", localtime())
    print(Fore.LIGHTBLUE_EX + "/weather2", "—Å–ø—Ä–æ—Å–∏–ª:", "ID", Fore.LIGHTGREEN_EX + str(message.from_user.id), "–ò–º—è:",
          Fore.LIGHTGREEN_EX +
          str(message.from_user.first_name), "–§–∞–º–∏–ª–∏—è:", Fore.LIGHTGREEN_EX +
          str(message.from_user.last_name), "–ù–∏–∫:", Fore.LIGHTGREEN_EX +
          str(message.from_user.username), '////', Fore.LIGHTRED_EX + str(current_time))

    return l_border, r_border


# beget server
@bot.message_handler(commands=['weather35'])
def days35(message):
    global l_border, r_border
    l_border = 20
    r_border = 40
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, selective=True)
    for city in cities.keys():
        markup.add(city)
    bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –ª–æ–∫–∞—Ü–∏—é:", reply_markup=markup)
    current_time = strftime("%a %b %d %H:%M:%S %Y", localtime())
    print(Fore.LIGHTBLUE_EX + "/weather35", "—Å–ø—Ä–æ—Å–∏–ª:", "ID", Fore.LIGHTGREEN_EX + str(message.from_user.id), "–ò–º—è:",
          Fore.LIGHTGREEN_EX +
          str(message.from_user.first_name), "–§–∞–º–∏–ª–∏—è:", Fore.LIGHTGREEN_EX +
          str(message.from_user.last_name), "–ù–∏–∫:", Fore.LIGHTGREEN_EX +
          str(message.from_user.username), '////', Fore.LIGHTRED_EX + str(current_time))

    return l_border, r_border


def parse_weather_data(data):
    global l_border, r_border
    forecast = ""
    for i in range(l_border, r_border):
        if i % 2 == 0:
            date = data["list"][i]["dt_txt"]
            weather = data["list"][i]["weather"][0]["description"]
            temperature = data["list"][i]["main"]["temp"] - 273.15
            pressure = data["list"][i]["main"]["pressure"]
            humidity = data["list"][i]["main"]["humidity"]
            wind_speed = data["list"][i]["wind"]["speed"]
            wind_gusts = data["list"][i]["wind"]["gust"]
            wind_direction_degrees = data["list"][i]["wind"]["deg"]
            wind_direction = ""

            # wind
            if 337.5 <= wind_direction_degrees <= 360 or 0 <= wind_direction_degrees < 22.5:
                wind_direction = "–°–µ–≤–µ—Ä–Ω—ã–π‚¨á"
            elif 22.5 <= wind_direction_degrees < 67.5:
                wind_direction = "–°–µ–≤–µ—Ä–æ-–í–æ—Å—Ç–æ—á–Ω—ã–π‚Üô"
            elif 67.5 <= wind_direction_degrees < 112.5:
                wind_direction = "–í–æ—Å—Ç–æ—á–Ω—ã–π‚¨Ö"
            elif 112.5 <= wind_direction_degrees < 157.5:
                wind_direction = "–Æ–≥–æ-–í–æ—Å—Ç–æ—á–Ω—ã–π‚Üñ"
            elif 157.5 <= wind_direction_degrees < 202.5:
                wind_direction = "–Æ–∂–Ω—ã–π‚¨Ü"
            elif 202.5 <= wind_direction_degrees < 247.5:
                wind_direction = "–Æ–≥–æ-–ó–∞–ø–∞–¥–Ω—ã–π‚Üó"
            elif 247.5 <= wind_direction_degrees < 292.5:
                wind_direction = "–ó–∞–ø–∞–¥–Ω—ã–π‚û°"
            elif 292.5 <= wind_direction_degrees < 337.5:
                wind_direction = "–°–µ–≤–µ—Ä–æ-–ó–∞–ø–∞–¥–Ω—ã–π‚Üò"

                # sky condition

            # thunderstorm
            weather = weather.replace("thunderstorm with light rain", "–ì—Ä–æ–∑–∞ —Å –Ω–µ–±–æ–ª—å—à–∏–º –¥–æ–∂–¥–µ–º‚õà")
            weather = weather.replace("thunderstorm with rain", "–ì—Ä–æ–∑–∞ —Å –¥–æ–∂–¥–µ–º‚õà")
            weather = weather.replace("thunderstorm with heavy rain", "–ì—Ä–æ–∑–∞ —Å —Å–∏–ª—å–Ω—ã–º –¥–æ–∂–¥–µ–º‚õà")
            weather = weather.replace("light thunderstorm", "–õ–µ–≥–∫–∞—è –≥—Ä–æ–∑–∞‚õà")
            weather = weather.replace("thunderstorm", "–ì—Ä–æ–∑–∞‚õà")
            weather = weather.replace("heavy thunderstorm", "–°–∏–ª—å–Ω–∞—è –≥—Ä–æ–∑–∞‚õà")
            weather = weather.replace("ragged thunderstorm", "–ú–µ—Å—Ç–∞–º–∏ –≥—Ä–æ–∑–∞‚õà")
            weather = weather.replace("thunderstorm with light drizzle", "–ì—Ä–æ–∑–∞ —Å –º–µ–ª–∫–∏–º –¥–æ–∂–¥–µ–º‚õà")
            weather = weather.replace("thunderstorm with drizzle", "–ì—Ä–æ–∑–∞ —Å –º–æ—Ä–æ—Å—å—é‚õà")

            # drizzle
            weather = weather.replace("light intensity drizzle", "–ú–µ–ª–∫–∞—è –º–æ—Ä–æ—Å—åüíß")
            weather = weather.replace("drizzle", "–ú–æ—Ä–æ—Å—åüíß")
            weather = weather.replace("heavy intensity drizzle", "–°–∏–ª—å–Ω–∞—è –º–æ—Ä–æ—Å—åüíßüíß")
            weather = weather.replace("light intensity drizzle rain", "–°–ª–∞–±–∞—è –º–æ—Ä–æ—Å—åüíß")
            weather = weather.replace("drizzle rain", "–ú–æ—Ä–æ—Å—è—â–∏–π –¥–æ–∂–¥—åüåß")
            weather = weather.replace("heavy intensity drizzle rain", "–õ–∏–≤–µ–Ω—åüåß")
            weather = weather.replace("shower rain and drizzle", "–õ–∏–≤–µ–Ω—åüåß")
            weather = weather.replace("heavy shower rain and drizzle", "–õ–∏–≤–µ–Ω—åüåß")
            weather = weather.replace("shower drizzle", "–û—á–µ–Ω—å —Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—åüåß")

            # rain
            weather = weather.replace("light rain", "–õ–µ–≥–∫–∏–π –¥–æ–∂–¥—åüåß")
            weather = weather.replace("moderate rain", "–£–º–µ—Ä–µ–Ω–Ω—ã–π –¥–æ–∂–¥—åüåß")
            weather = weather.replace("heavy intensity rain", "–°–∏–ª—å–Ω—ã–π –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã–π –¥–æ–∂–¥—åüåß")
            weather = weather.replace("very heavy rain", "–û—á–µ–Ω—å —Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—åüåß")
            weather = weather.replace("extreme rain", "–°–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—åüåß")
            weather = weather.replace("freezing rain", "–õ–µ–¥—è–Ω–æ–π –¥–æ–∂–¥—å")
            weather = weather.replace("light intensity shower rain", "–°–ª–∞–±—ã–π –ª–∏–≤–µ–Ω—åüåß")
            weather = weather.replace("shower rain", "–õ–∏–≤–Ω–µ–≤—ã–π –¥–æ–∂–¥—åüåß")
            weather = weather.replace("heavy intensity shower rain", "–°–∏–ª—å–Ω—ã–π –ª–∏–≤–Ω–µ–≤—ã–π –¥–æ–∂–¥—åüåß")
            weather = weather.replace("ragged shower rain", "–ü—Ä–µ—Ä—ã–≤–∏—Å—Ç—ã–π –ª–∏–≤–µ–Ω—åüåß")

            # snow
            weather = weather.replace("light snow", "–°–ª–∞–±—ã–π —Å–Ω–µ–≥‚ùÑ")
            weather = weather.replace("snow", "–°–Ω–µ–≥‚ùÑ")
            weather = weather.replace("Heavy snow", "–°–∏–ª—å–Ω—ã–π —Å–Ω–µ–≥‚ùÑ")
            weather = weather.replace("Sleet", "–ú–æ–∫—Ä—ã–π —Å–Ω–µ–≥‚ùÑ")
            weather = weather.replace("Light shower sleet", "–°–ª–∞–±—ã–π —Å–Ω–µ–≥–æ–ø–∞–¥, –º–æ–∫—Ä—ã–π —Å–Ω–µ–≥‚ùÑ")
            weather = weather.replace("Shower sleet", "–°–Ω–µ–≥–æ–ø–∞–¥, –º–æ–∫—Ä—ã–π —Å–Ω–µ–≥‚ùÑ")
            weather = weather.replace("Light rain and snow	", "–°–ª–∞–±—ã–π –¥–æ–∂–¥—å —Å–æ —Å–Ω–µ–≥–æ–º‚ùÑ")
            weather = weather.replace("Rain and snow", "–î–æ–∂–¥—å —Å–æ —Å–Ω–µ–≥–æ–º‚ùÑ")
            weather = weather.replace("Light shower snow", "–°–ª–∞–±—ã–π —Å–Ω–µ–≥–æ–ø–∞–¥‚ùÑ")
            weather = weather.replace("Shower snow", "–°–Ω–µ–≥–æ–ø–∞–¥‚ùÑ")
            weather = weather.replace("Heavy shower snow", "–°–∏–ª—å–Ω—ã–π —Å–Ω–µ–≥–æ–ø–∞–¥‚ùÑ")

            # atmosphere
            weather = weather.replace("mist", "–¢—É–º–∞–Ωüå´")
            weather = weather.replace("smoke", "–î—ã–ºüå´")
            weather = weather.replace("Haze", "–¢—É–º–∞–Ωüå´")
            weather = weather.replace("sand/ dust whirls", "–ø–µ—Å—á–∞–Ω—ã–µ/–ø—ã–ª–µ–≤—ã–µ –≤–∏—Ö—Ä–∏üí®")
            weather = weather.replace("fog", "–¢—É–º–∞–Ωüå´")
            weather = weather.replace("sand", "–í–µ—Ç–µ—Ä —Å –ø–µ—Å–∫–æ–ºüí®")
            weather = weather.replace("dust", "–ü—ã–ª—å–Ω—ã–π –≤–µ—Ç–µ—Äüí®")
            weather = weather.replace("volcanic ash", "–í—É–ª–∫–∞–Ω–∏—á–µ—Å–∫–∏–π –ø–µ–ø–µ–ªüå´")
            weather = weather.replace("squalls", "–®–∫–≤–∞–ª—å–Ω—ã–π –≤–µ—Ç–µ—Äüí®")
            weather = weather.replace("tornado", "–¢–æ—Ä–Ω–∞–¥–æüí®")

            # not done yet
            weather = weather.replace("clear sky", "–Ø—Å–Ω–æ–µ –Ω–µ–±–æ‚òÄ")
            weather = weather.replace("few clouds", "–ú–∞–ª–æ–æ–±–ª–∞—á–Ω–æ‚õÖ")
            weather = weather.replace("scattered clouds", "–†–∞—Å—Å–µ—è–Ω–Ω—ã–µ –æ–±–ª–∞–∫–∞üå§")
            weather = weather.replace("broken clouds", "–î–æ–∂–¥–µ–≤—ã–µ –æ–±–ª–∞–∫–∞‚òÅ")
            weather = weather.replace("overcast clouds", "–ì—Ä–æ–∑–æ–≤—ã–µ –æ–±–ª–∞–∫–∞‚òÅ")

            forecast += f"{date}\n\n–ü–æ–≥–æ–¥–∞: {weather}\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {int(round(temperature)):.2f} (¬∞C) \n–î–∞–≤–ª–µ–Ω–∏–µ: {pressure} (–≥–ü–∞) \n–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity} (%) \n–í–µ—Ç–µ—Ä: {wind_speed} (–º/—Å) \n–ü–æ—Ä—ã–≤—ã –¥–æ: {wind_gusts} (–º/—Å) \n–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞: {wind_direction}\n\n"
    return forecast


def handle_message(message, city, api_key):
    data = get_weather(city, api_key)
    current_time = strftime("%a %b %d %H:%M:%S %Y", localtime())
    print(Fore.LIGHTBLUE_EX + str(city), "—Å–ø—Ä–æ—Å–∏–ª:", "ID", Fore.LIGHTGREEN_EX + str(message.from_user.id), "–ò–º—è:",
          Fore.LIGHTGREEN_EX +
          str(message.from_user.first_name), "–§–∞–º–∏–ª–∏—è:", Fore.LIGHTGREEN_EX +
          str(message.from_user.last_name), "–ù–∏–∫:", Fore.LIGHTGREEN_EX +
          str(message.from_user.username), '////', Fore.LIGHTRED_EX + str(current_time))

    return parse_weather_data(data)


@bot.message_handler(func=lambda message: message.text in cities.keys())
def handle_city(message):
    response = handle_message(message, cities[message.text], api_key)
    bot.reply_to(message, response)


bot.polling(none_stop=True)
