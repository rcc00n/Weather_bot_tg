from PIL import Image, ImageDraw, ImageFont
import re

raw_data = """"2023-04-22 03:00:00
–ü–æ–≥–æ–¥–∞: –õ–µ–≥–∫–∏–π –¥–æ–∂–¥—åüåß
–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: 10 ¬∞C
–í–ª–∞–∂–Ω–æ—Å—Ç—å: 72 %
–î–∞–≤–ª–µ–Ω–∏–µ: 1008 –≥–ü–∞, 756.06205248 –º–º —Ä—Ç —Å—Ç
–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: 3.86 –º/—Å
–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞: –ó–∞–ø–∞–¥
2023-04-22 06:00:00
–ü–æ–≥–æ–¥–∞: –õ–µ–≥–∫–∏–π –¥–æ–∂–¥—åüåß
–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: 10 ¬∞C
–í–ª–∞–∂–Ω–æ—Å—Ç—å: 80 %
–î–∞–≤–ª–µ–Ω–∏–µ: 1009 –≥–ü–∞, 756.81211404 –º–º —Ä—Ç —Å—Ç
–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: 3.08 –º/—Å
–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞: –°–µ–≤–µ—Ä–æ-–∑–∞–ø–∞–¥
2023-04-22 09:00:00
–ü–æ–≥–æ–¥–∞: –õ–µ–≥–∫–∏–π –¥–æ–∂–¥—åüåß
–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: 11 ¬∞C
–í–ª–∞–∂–Ω–æ—Å—Ç—å: 84 %
–î–∞–≤–ª–µ–Ω–∏–µ: 1012 –≥–ü–∞, 759.0622987200001 –º–º —Ä—Ç —Å—Ç
–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: 4.96 –º/—Å
–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞: –°–µ–≤–µ—Ä–æ-–∑–∞–ø–∞–¥"""


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
def convert_data(raw_data):
    data = re.split('\n\n+', raw_data.strip())
    result = [
        ["–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è", "–ü–æ–≥–æ–¥–∞", "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", "–í–ª–∞–∂–Ω–æ—Å—Ç—å", "–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è", "–î–∞–≤–ª–µ–Ω–∏–µ", "–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞",
         "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞"]
    ]
    num_lines = raw_data.count('\n') + 1
    for _ in range(num_lines):
        for item in data:
            lines = item.split('\n')
            date_time = lines[0].strip()
            weather = re.search(r'–ü–æ–≥–æ–¥–∞: (.+)', lines[1]).group(1)
            temperature = re.search(r'–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: (.+)', lines[2]).group(1)
            humidity = re.search(r'–í–ª–∞–∂–Ω–æ—Å—Ç—å: (.+)', lines[3]).group(1)
            pressure = re.search(r'–î–∞–≤–ª–µ–Ω–∏–µ: (.+)', lines[4]).group(1)
            wind_speed = re.search(r'–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: (.+)', lines[5]).group(1)
            wind_direction = re.search(r'–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞: (.+)', lines[6]).group(1)

            result.append([date_time, weather, temperature, humidity, date_time, pressure, wind_speed, wind_direction])

    return result


# –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é raw_data –¥–∞–Ω–Ω—ã–º–∏ –∏ –≤—ã–∑–æ–≤–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é
converted_data = convert_data(raw_data)
print(converted_data)


def create_weather_table_image(converted_data):
    font = ImageFont.truetype("arial.ttf", 14)
    header_font = ImageFont.truetype("arialbd.ttf", 14)

    num_rows = len(converted_data)
    num_columns_per_line = 4
    cell_width = int(max([font.getlength(text) for row in converted_data for text in row]) + 20)
    cell_height = int(font.getlength("A") + 10)
    image_width = int(cell_width * num_columns_per_line)
    image_height = int(cell_height * (num_rows * 2))

    bg_image = Image.open("background.jpg")
    bg_image = bg_image.resize((image_width, image_height))

    image = Image.new("RGBA", (image_width, image_height), color=(0, 0, 0, 0))
    image.paste(bg_image, (0, 0))

    draw = ImageDraw.Draw(image)

    draw_grid(draw, image_width, image_height, cell_width, cell_height)
    draw_text(draw, converted_data, num_rows, num_columns_per_line, cell_width, cell_height, font, header_font)

    image.save("weather_table.png")


def draw_cells(draw, num_rows, num_columns_per_line, cell_width, cell_height):
    header_bg_color = (44, 62, 80)
    header_text_color = (255, 255, 255)
    even_row_color = (236, 240, 241)
    odd_row_color = (255, 255, 255)

    for row in range(num_rows * 2):
        for column in range(num_columns_per_line):
            cell_color = header_bg_color if row == 0 or row == num_rows else (
                even_row_color if row % 2 == 0 else odd_row_color)
            draw.rectangle(
                [(column * cell_width, row * cell_height), ((column + 1) * cell_width, (row + 1) * cell_height)],
                fill=cell_color)


def draw_grid(draw, image_width, image_height, cell_width, cell_height):
    grid_color = (149, 165, 166)

    for x in range(0, image_width, cell_width):
        draw.line([(x, 0), (x, image_height)], fill=grid_color, width=2)
    for y in range(0, image_height, cell_height):
        draw.line([(0, y), (image_width, y)], fill=grid_color, width=2)
    draw.line([(0, image_height - 1), (image_width, image_height - 1)], fill=grid_color, width=2)
    draw.line([(image_width - 1, 0), (image_width - 1, image_height)], fill=grid_color, width=2)


def draw_text(draw, converted_data, num_rows, num_columns_per_line, cell_width, cell_height, font, header_font):
    header_text_color = (255, 255, 255)

    for row in range(num_rows * 2):
        for column in range(num_columns_per_line):
            original_row = row % num_rows
            original_column = column + num_columns_per_line * (row // num_rows)
            if original_column >= len(converted_data[original_row]):
                continue
            text = converted_data[original_row][original_column]
            if text == "":
                continue
            current_font = header_font if row == 0 or row == num_rows else font
            text_color = header_text_color if row == 0 or row == num_rows else (0, 0, 0)
            text_width, text_height = current_font.getlength(text), current_font.getbbox(text)[3]
            x = (cell_width - text_width) // 2 + cell_width * column
            y = (cell_height - text_height) // 2 + cell_height * row
            draw.text((x, y), text, font=current_font, fill=text_color)


# converted_data = [
#     ["–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è", "–ü–æ–≥–æ–¥–∞", "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", "–í–ª–∞–∂–Ω–æ—Å—Ç—å", "–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è", "–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞", "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞",
#      "–î–∞–≤–ª–µ–Ω–∏–µ"],
#     ["2023-04-21 03:00:00", "–ì—Ä–æ–∑–æ–≤—ã–µ –æ–±–ª–∞–∫–∞", "10 ¬∞C", "95 %", "2023-04-21 03:00:00", "3 –º/—Å", "–Æ–≥–æ-–∑–∞–ø–∞–¥",
#      "1008 –≥–ü–∞, 756 –º–º —Ä—Ç —Å—Ç"],
#     ["2023-04-21 06:00:00", "–ì—Ä–æ–∑–æ–≤—ã–µ –æ–±–ª–∞–∫–∞", "11 ¬∞C", "86 %", "2023-04-21 06:00:00", "5 –º/—Å", "–Æ–≥–æ-–∑–∞–ø–∞–¥",
#      "1008 –≥–ü–∞, 756 –º–º —Ä—Ç —Å—Ç"],
#     ["2023-04-21 09:00:00", "–ì—Ä–æ–∑–æ–≤—ã–µ –æ–±–ª–∞–∫–∞", "15 ¬∞C", "63 %", "2023-04-21 09:00:00", "6 –º/—Å", "–Æ–≥–æ-–∑–∞–ø–∞–¥",
#      "1008 –≥–ü–∞, 756 –º–º —Ä—Ç —Å—Ç"],
#     ["2023-04-21 12:00:00", "–õ–µ–≥–∫–∏–π –¥–æ–∂–¥—å", "10 ¬∞C", "89 %", "2023-04-21 12:00:00", "5 –º/—Å", "–Æ–≥–æ-–∑–∞–ø–∞–¥",
#      "1009 –≥–ü–∞, 756 –º–º —Ä—Ç —Å—Ç"],
#     ["2023-04-21 15:00:00", "–õ–µ–≥–∫–∏–π –¥–æ–∂–¥—å", "10 ¬∞C", "86 %", "2023-04-21 15:00:00", "5 –º/—Å", "–Æ–≥–æ-–∑–∞–ø–∞–¥",
#      "1009 –≥–ü–∞, 756 –º–º —Ä—Ç —Å—Ç"],
#     ["2023-04-21 18:00:00", "–õ–µ–≥–∫–∏–π –¥–æ–∂–¥—å", "9 ¬∞C", "90 %", "2023-04-21 18:00:00", "5 –º/—Å", "–Æ–≥–æ-–∑–∞–ø–∞–¥",
#      "1010 –≥–ü–∞, 757 –º–º —Ä—Ç —Å—Ç"],
#     ["2023-04-21 21:00:00", "–õ–µ–≥–∫–∏–π –¥–æ–∂–¥—å", "9 ¬∞C", "93 %", "2023-04-21 21:00:00", "5 –º/—Å", "–Æ–≥–æ-–∑–∞–ø–∞–¥",
#      "1010 –≥–ü–∞, 757 –º–º —Ä—Ç —Å—Ç"],
#     ["2023-04-22 00:00:00", "–õ–µ–≥–∫–∏–π –¥–æ–∂–¥—å", "9 ¬∞C", "95 %", "2023-04-22 00:00:00", "5 –º/—Å", "–Æ–≥–æ-–∑–∞–ø–∞–¥",
#      "1010 –≥–ü–∞, 757 –º–º —Ä—Ç —Å—Ç"]
# ]

create_weather_table_image(converted_data)
