from PIL import Image, ImageDraw, ImageFont

data = [
    ["–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è", "–ü–æ–≥–æ–¥–∞", "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", "–í–ª–∞–∂–Ω–æ—Å—Ç—å", "–î–∞–≤–ª–µ–Ω–∏–µ", "–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞", "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞"],
    ["2023-04-21 03:00:00", "–ì—Ä–æ–∑–æ–≤—ã–µ –æ–±–ª–∞–∫–∞‚òÅ", "10 ¬∞C", "95 %", "1008 –≥–ü–∞, 756.06205248 –º–º —Ä—Ç —Å—Ç", "3.48 –º/—Å", "–Æ–≥–æ-–∑–∞–ø–∞–¥"],
    ["2023-04-21 06:00:00", "–ì—Ä–æ–∑–æ–≤—ã–µ –æ–±–ª–∞–∫–∞‚òÅ", "11 ¬∞C", "86 %", "1008 –≥–ü–∞, 756.06205248 –º–º —Ä—Ç —Å—Ç", "5.49 –º/—Å", "–Æ–≥–æ-–∑–∞–ø–∞–¥"],
    ["2023-04-21 09:00:00", "–ì—Ä–æ–∑–æ–≤—ã–µ –æ–±–ª–∞–∫–∞‚òÅ", "15 ¬∞C", "63 %", "1008 –≥–ü–∞, 756.06205248 –º–º —Ä—Ç —Å—Ç", "6.93 –º/—Å", "–Æ–≥–æ-–∑–∞–ø–∞–¥"],
    ["2023-04-21 12:00:00", "–õ–µ–≥–∫–∏–π –¥–æ–∂–¥—åüåß", "10 ¬∞C", "89 %", "1009 –≥–ü–∞, 756.81211404 –º–º —Ä—Ç —Å—Ç", "5.75 –º/—Å", "–Æ–≥–æ-–∑–∞–ø–∞–¥"],
    ["2023-04-21 15:00:00", "–õ–µ–≥–∫–∏–π –¥–æ–∂–¥—åüåß", "10 ¬∞C", "86 %", "1009 –≥–ü–∞, 756.81211404 –º–º —Ä—Ç —Å—Ç", "5.33 –º/—Å", "–Æ–≥–æ-–∑–∞–ø–∞–¥"],
    ["2023-04-21 18:00:00", "–õ–µ–≥–∫–∏–π –¥–æ–∂–¥—åüåß", "9 ¬∞C", "90 %", "1010 –≥–ü–∞, 757.5621756 –º–º —Ä—Ç —Å—Ç", "5.34 –º/—Å", "–Æ–≥–æ-–∑–∞–ø–∞–¥"],
    ["2023-04-21 21:00:00", "–õ–µ–≥–∫–∏–π –¥–æ–∂–¥—åüåß", "9 ¬∞C", "93 %", "1010 –≥–ü–∞, 757.5621756 –º–º —Ä—Ç —Å—Ç", "5.59 –º/—Å", "–Æ–≥–æ-–∑–∞–ø–∞–¥"],
    ["2023-04-22 00:00:00", "–õ–µ–≥–∫–∏–π –¥–æ–∂–¥—åüåß", "9 ¬∞C", "95 %", "1010 –≥–ü–∞, 757.5621756 –º–º —Ä—Ç —Å—Ç", "5.53 –º/—Å", "–Æ–≥–æ-–∑–∞–ø–∞–¥"],
    ["2023-04-22 03:00:00", "–£–º–µ—Ä–µ–Ω–Ω—ã–π –¥–æ–∂–¥—åüåß", "8 ¬∞C", "94 %", "1010 –≥–ü–∞, 757.5621756 –º–º —Ä—Ç —Å—Ç", "5.84 –º/—Å", "–Æ–≥–æ-–∑–∞–ø–∞–¥"]
]


font = ImageFont.truetype("arial.ttf", 14)
header_font = ImageFont.truetype("arialbd.ttf", 14)

cell_width = int(max([font.getlength(text) for row in data for text in row]) + 20)
cell_height = int(font.getlength("A") + 10)

image_width = int(cell_width * len(data[0]))
image_height = int(cell_height * len(data))

image = Image.new("RGB", (image_width, image_height), color="white")
draw = ImageDraw.Draw(image)

header_bg_color = (44, 62, 80)
header_text_color = (255, 255, 255)
even_row_color = (236, 240, 241)
odd_row_color = (255, 255, 255)
grid_color = (149, 165, 166)

# –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —è—á–µ–µ–∫
for row in range(len(data)):
    for column in range(len(data[0])):
        cell_color = header_bg_color if row == 0 else (even_row_color if row % 2 == 0 else odd_row_color)
        draw.rectangle([(column * cell_width, row * cell_height), ((column + 1) * cell_width, (row + 1) * cell_height)], fill=cell_color)

# –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å–µ—Ç–∫–∏
for x in range(0, image_width, cell_width):
    draw.line([(x, 0), (x, image_height)], fill=grid_color, width=2)
for y in range(0, image_height, cell_height):
    draw.line([(0, y), (image_width, y)], fill=grid_color, width=2)
draw.line([(0, image_height - 1), (image_width, image_height - 1)], fill=grid_color, width=2)
draw.line([(image_width - 1, 0), (image_width - 1, image_height)], fill=grid_color, width=2)

# –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞
for row in range(len(data)):
    for column in range(len(data[0])):
        text = data[row][column]
        current_font = header_font if row == 0 else font
        text_color = header_text_color if row == 0 else (0, 0, 0)
        text_width, text_height = current_font.getlength(text), current_font.getbbox(text)[3]
        x = (cell_width - text_width) // 2 + cell_width * column
        y = (cell_height - text_height) // 2 + cell_height * row
        draw.text((x, y), text, font=current_font, fill=text_color)

image.save("weather_table.png")
